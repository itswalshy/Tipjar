<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>TipJar</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <style>
        :root {
            --starbucks-green: #00704A;
            --starbucks-dark: #1E3932;
            --starbucks-gold: #CBA258;
            --app-dark: #111827;
            --app-darker: #0A0F16;
            --app-accent: #00F5A0;
        }

        /* Dark mode colors */
        .dark {
            --bg-primary: var(--app-dark);
            --bg-secondary: var(--app-darker);
            --text-primary: #E0E0E0;
            --text-secondary: var(--app-accent);
            --card-bg: rgba(30, 41, 59, 0.7);
            --input-bg: rgba(17, 24, 39, 0.8);
            --button-hover: #00875A;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #0F1117; /* Nearly black background */
            color: var(--text-primary);
            min-height: 100vh;
            padding-bottom: env(safe-area-inset-bottom);
            background-image: none;
        }

        .logo-container {
            display: none;
        }

        .app-title {
            color: var(--app-accent);
            font-weight: 700;
            letter-spacing: 1px;
            margin-top: 2.5rem;
            margin-bottom: 0.8rem;
            font-size: 3.8rem;
            text-shadow: 0 0 15px rgba(0, 245, 160, 0.3);
            position: relative;
            display: inline-block;
        }

        .app-subtitle {
            color: rgba(0, 245, 160, 0.8);
            font-style: italic;
            font-size: 1.4rem;
            margin-bottom: 3rem;
        }

        .custom-card {
            border: 1px solid rgba(0, 245, 160, 0.1);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 24px;
            background-color: var(--card-bg);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .custom-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.3);
        }

        .partner-card {
            border: 1px solid rgba(0, 245, 160, 0.15);
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 16px;
            background-color: var(--card-bg);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .partner-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        .partner-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .partner-card-name {
            margin: 0;
            font-size: 18px;
            font-weight: bold;
            color: var(--text-primary);
        }

        .partner-card-amount {
            color: var(--app-accent);
            font-weight: bold;
            font-size: 24px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .calculation-box {
            font-size: 15px;
            margin-top: 12px;
            background-color: var(--input-bg);
            padding: 12px;
            border-radius: 12px;
            font-weight: 500;
            color: var(--text-primary);
        }

        .bills-box {
            font-size: 15px;
            margin-top: 12px;
            background-color: rgba(0, 245, 160, 0.05);
            padding: 12px;
            border-radius: 12px;
            color: var(--app-accent);
            font-weight: 500;
        }

        .bill-chip {
            background-color: rgba(0, 245, 160, 0.2);
            color: var(--app-accent);
            padding: 8px 14px;
            border-radius: 20px;
            display: inline-block;
            margin-right: 8px;
            margin-bottom: 8px;
            font-size: 14px;
            backdrop-filter: blur(4px);
            transition: background-color 0.2s ease, transform 0.2s ease;
        }

        .bill-chip:hover {
            background-color: rgba(0, 245, 160, 0.3);
            transform: scale(1.05);
        }

        .section-divider {
            height: 1px;
            background: linear-gradient(90deg, rgba(0,245,160,0) 0%, rgba(0,245,160,0.3) 50%, rgba(0,245,160,0) 100%);
            margin: 32px 0;
        }

        input[type="number"], input[type="text"] {
            border: 1px solid rgba(0, 245, 160, 0.2);
            border-radius: 12px;
            padding: 14px;
            width: 100%;
            margin-bottom: 14px;
            background-color: var(--input-bg);
            color: var(--text-primary);
            font-size: 16px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        input[type="number"]:focus, input[type="text"]:focus {
            border-color: var(--app-accent);
            outline: none;
            box-shadow: 0 0 0 3px rgba(0, 245, 160, 0.15);
        }

        .btn-primary {
            background-color: rgba(0, 245, 160, 0.15);
            color: var(--app-accent);
            border: 1px solid rgba(0, 245, 160, 0.3);
            border-radius: 12px;
            padding: 14px 24px;
            font-weight: 600;
            letter-spacing: 0.5px;
            width: 100%;
            cursor: pointer;
            transition: all 0.2s ease;
            backdrop-filter: blur(4px);
            -webkit-tap-highlight-color: transparent;
        }

        .btn-primary:hover {
            background-color: rgba(0, 245, 160, 0.25);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 245, 160, 0.2);
        }

        .btn-primary:active {
            transform: translateY(1px);
        }

        .collapsible {
            background-color: rgba(30, 41, 59, 0.4);
            color: var(--text-primary);
            cursor: pointer;
            padding: 16px;
            width: 100%;
            border: 1px solid rgba(0, 245, 160, 0.1);
            text-align: left;
            outline: none;
            font-size: 16px;
            border-radius: 12px;
            margin-bottom: 12px;
            transition: all 0.2s ease;
            backdrop-filter: blur(4px);
        }

        .collapsible:hover {
            background-color: rgba(30, 41, 59, 0.6);
        }

        .collapsible:after {
            content: '\002B';
            color: var(--app-accent);
            font-weight: bold;
            float: right;
            margin-left: 5px;
            transition: transform 0.3s ease;
        }

        .active {
            background-color: rgba(30, 41, 59, 0.7);
            border-color: rgba(0, 245, 160, 0.2);
        }

        .active:after {
            content: "\2212";
            transform: rotate(180deg);
        }

        .collapsible-content {
            padding: 0 18px;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.4s ease-out;
            border-radius: 0 0 12px 12px;
        }

        .file-drop-area {
            position: relative;
            border: 2px dashed rgba(0, 245, 160, 0.3);
            border-radius: 16px;
        }

        /* File upload folder component from Uiverse.io by Ma7moud344 */
        .file-upload-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
            background: linear-gradient(135deg, #1E3932, #111827);
            border-radius: 15px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 320px;
            margin: 0 auto;
            transition: all 0.3s ease;
        }
        
        .folder {
            position: relative;
            animation: float 2.5s infinite ease-in-out;
            transition: transform 0.3s ease;
        }
        
        .folder:hover {
            transform: scale(1.05);
        }
        
        .folder .top {
            background: linear-gradient(135deg, #ff9a56, #ff6f56);
            width: 70px;
            height: 18px;
            border-radius: 12px 12px 0 0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            position: relative;
            z-index: 2;
        }
        
        .folder .bottom {
            background: linear-gradient(135deg, #ffe563, #ffc663);
            width: 100px;
            height: 70px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
            border-radius: 0 10px 10px 10px;
            position: relative;
            top: -10px;
        }
        
        .custom-file-upload {
            font-size: 1em;
            color: #ffffff;
            text-align: center;
            margin-top: 20px;
            padding: 12px 20px;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 10px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: background 0.3s ease;
            display: inline-block;
            width: 200px;
        }
        
        .custom-file-upload:hover {
            background: rgba(255, 255, 255, 0.4);
        }
        
        .custom-file-upload input[type="file"] {
            display: none;
        }
        
        @keyframes float {
            0% {
                transform: translateY(0px);
            }
        
            50% {
                transform: translateY(-20px);
            }
        
            100% {
                transform: translateY(0px);
            }
        }

        .file-message {
            color: var(--text-primary);
            margin-bottom: 15px;
            font-size: 16px;
        }

        .file-input {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

        .footer-text {
            color: rgba(224, 224, 224, 0.6);
            transition: color 0.2s ease;
        }

        .footer-text:hover {
            color: var(--app-accent);
        }

        @media (max-width: 768px) {
            #uploadSection {
                max-width: 320px;
                padding: 16px !important;
            }
            
            .file-upload-container {
                padding: 16px;
                max-width: 260px;
            }

            .folder .top {
                width: 60px;
                height: 16px;
            }

            .folder .bottom {
                width: 90px;
                height: 60px;
            }

            .custom-file-upload {
                font-size: 0.9em;
                padding: 10px 16px;
                width: 180px;
            }

            .logo-container {
                width: 240px;
                height: 240px;
            }

            .app-title {
                font-size: 2.8rem;
                margin-top: 1.5rem;
            }

            .app-subtitle {
                font-size: 1rem;
            }

            input, button, select {
                font-size: 16px;
                min-height: 48px;
            }

            .btn-primary {
                padding: 14px 20px;
            }

            .custom-card, .partner-card {
                padding: 16px;
                margin-bottom: 16px;
            }

            .calculation-box, .bills-box {
                padding: 12px;
                font-size: 14px;
            }

            .bill-chip {
                padding: 6px 10px;
                font-size: 13px;
            }
        }

        /* iOS-specific optimizations */
        @supports (-webkit-touch-callout: none) {
            input, select, textarea {
                font-size: 16px !important;
            }

            .btn-primary {
                -webkit-appearance: none;
                margin: 0;
            }

            .custom-card, .partner-card {
                -webkit-backdrop-filter: blur(10px);
                backdrop-filter: blur(10px);
            }
        }

        /* Hide scrollbar while keeping functionality */
        ::-webkit-scrollbar {
            width: 0px;
            background: transparent;
        }

        #uploadSection {
            max-width: 450px;
            margin: 0 auto;
            transition: all 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="container mx-auto px-4 py-8 max-w-4xl" style="background-color: transparent;">
        <!-- Title Section -->
        <div class="text-center mb-12 animate__animated animate__fadeIn">
            <h1 class="app-title">
              TipJar
            </h1>
            <div class="app-subtitle">"If theres a Will, Theres a Way!" -Lauren 2025</div>
        </div>

        <!-- Main Application -->
        <div class="main-app">
            <!-- Initial Upload Section -->
            <div id="uploadSection" class="custom-card p-6 animate__animated animate__fadeInUp animate__delay-1s">
                <h2 class="text-xl font-bold text-gray-100 mb-6 text-center">Upload Tip Distribution Report</h2>
                <!-- From Uiverse.io by Ma7moud344 --> 
                <div class="file-upload-container">
                  <div class="folder">
                    <div class="top"></div>
                    <div class="bottom"></div>
                  </div>
                  <label class="custom-file-upload">
                    <input class="title" type="file" id="imageUpload" accept="image/*" />
                    Choose a file
                  </label>
                </div>
                <div id="selectedFileName" class="mt-3 text-center text-gray-400"></div>
                <div class="mt-4">
                    <button id="processButton" class="btn-primary py-3 opacity-50 cursor-not-allowed" disabled>Process</button>
                </div>
            </div>

            <!-- Preview Section -->
            <div id="previewSection" class="mt-8 hidden animate__animated animate__fadeIn">
                <h2 class="text-xl font-bold text-gray-100 mb-4">Preview</h2>
                <div class="custom-card p-4">
                    <img id="previewImage" class="w-full rounded-lg" src="" alt="Preview">
                </div>
            </div>

            <!-- Extracted Text Section -->
            <div id="extractedTextSection" class="mt-8 hidden animate__animated animate__fadeIn">
                <h2 class="text-xl font-bold text-gray-100 mb-4">Extracted Tippable Hours</h2>
                <div class="custom-card p-4">
                    <pre id="extractedText" class="whitespace-pre-wrap text-gray-300"></pre>
                </div>
                <div class="mt-4">
                    <button id="extractPartnerDataBtn" class="btn-primary py-3">Extract Partner Data</button>
                </div>
            </div>

            <!-- Partner Data Section -->
            <div id="partnerDataSection" class="mt-8 hidden animate__animated animate__fadeIn">
                <h2 class="text-xl font-bold text-gray-100 mb-4">Partner Data</h2>
                <div class="custom-card p-4">
                    <div id="totalHours" class="text-lg font-bold mb-4 text-gray-100"></div>
                    <div id="partnerList" class="text-gray-300"></div>
                </div>

                <div class="mt-6">
                    <label for="totalTipAmount" class="block mb-2 text-gray-300">Enter total tip amount for the week: $</label>
                    <input type="number" id="totalTipAmount" min="0" step="10" class="w-full">
                    <button id="calculateTipsBtn" class="btn-primary mt-4 py-3">Calculate Tips</button>
                </div>
            </div>

            <!-- Tip Distribution Results -->
            <div id="tipDistributionSection" class="mt-8 hidden animate__animated animate__fadeIn">
                <h2 class="text-xl font-bold text-gray-100 mb-4">Tip Distribution Results</h2>
                
                <div id="hourlyRateInfo" class="bg-gray-800 bg-opacity-70 text-gray-100 p-4 rounded-lg mb-4">
                    <p class="mb-0"><strong>Calculation:</strong></p>
                    <p class="mb-0 text-app-accent" id="calculationDetails"></p>
                </div>
                
                <div id="tipDistributionList"></div>
                
                <button class="collapsible mt-4 text-gray-300">Copy-paste format</button>
                <div class="collapsible-content">
                    <div class="p-4">
                        <pre id="copyPasteFormat" class="whitespace-pre-wrap bg-gray-800 bg-opacity-50 p-4 rounded text-sm text-gray-300"></pre>
                    </div>
                </div>
                
                <button id="saveToHistoryBtn" class="btn-primary mt-6 py-3">Save to History</button>
            </div>

            <!-- Distribution History -->
            <div id="historySection" class="mt-8 hidden animate__animated animate__fadeIn">
                <button class="collapsible text-gray-300">View Distribution History</button>
                <div class="collapsible-content">
                    <div id="historyList" class="p-4"></div>
                </div>
            </div>

            <!-- Download Options -->
            <div id="downloadSection" class="mt-8 hidden animate__animated animate__fadeIn">
                <h2 class="text-xl font-bold text-gray-100 mb-4">Download Options</h2>
                <div class="space-y-4">
                    <a id="downloadOcrBtn" href="#" download="ocr_result.txt" class="btn-primary py-3 block text-center">Download OCR Text</a>
                    <a id="downloadTableBtn" href="#" download="tip_distribution.html" class="btn-primary py-3 block text-center">Download as Table</a>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <div class="section-divider"></div>
        <div class="text-center mt-6 mb-8">
            <p class="mb-0 footer-text">Made by William Walsh</p>
            <p class="mt-1 footer-text">Starbucks Store# 69600</p>
        </div>
    </div>

    <script>
        // Update file input handling for the new UI
        const fileInput = document.getElementById('imageUpload');
        const selectedFileName = document.getElementById('selectedFileName');
        const processButton = document.getElementById('processButton');
        
        // File upload handling
        fileInput.addEventListener('change', function(e) {
            if (this.files.length > 0) {
                const file = this.files[0];
                selectedFileName.textContent = file.name;
                processButton.classList.remove('opacity-50', 'cursor-not-allowed');
                processButton.disabled = false;
                
                // Create image preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    state.imageData = e.target.result;
                }
                reader.readAsDataURL(file);
            }
        });

        // Global state management (similar to Streamlit's session state)
        const state = {
            ocrResult: null,
            imageData: null,
            partnerData: null,
            totalHours: 0,
            tipCalculated: false,
            weekCounter: 1,
            tipsHistory: [],
            hourlyRate: 0,
            totalTipAmount: 0,
            distributedTips: null
        };

        // Gemini API settings
        const GEMINI_API_KEY = "AIzaSyCi_m_KbY-a36tvHl09C1Mtyx_K38GuokY";
        const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";

        // DOM Elements
        const uploadSection = document.getElementById('uploadSection');
        const imageUpload = document.getElementById('imageUpload');
        const previewSection = document.getElementById('previewSection');
        const previewImage = document.getElementById('previewImage');
        const extractedTextSection = document.getElementById('extractedTextSection');
        const extractedText = document.getElementById('extractedText');
        const extractPartnerDataBtn = document.getElementById('extractPartnerDataBtn');
        const partnerDataSection = document.getElementById('partnerDataSection');
        const totalHours = document.getElementById('totalHours');
        const partnerList = document.getElementById('partnerList');
        const totalTipAmount = document.getElementById('totalTipAmount');
        const calculateTipsBtn = document.getElementById('calculateTipsBtn');
        const tipDistributionSection = document.getElementById('tipDistributionSection');
        const hourlyRateInfo = document.getElementById('hourlyRateInfo');
        const calculationDetails = document.getElementById('calculationDetails');
        const tipDistributionList = document.getElementById('tipDistributionList');
        const copyPasteFormat = document.getElementById('copyPasteFormat');
        const saveToHistoryBtn = document.getElementById('saveToHistoryBtn');
        const historySection = document.getElementById('historySection');
        const historyList = document.getElementById('historyList');
        const downloadSection = document.getElementById('downloadSection');
        const downloadOcrBtn = document.getElementById('downloadOcrBtn');
        const downloadTableBtn = document.getElementById('downloadTableBtn');

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Set up collapsible sections
            const collapsibles = document.getElementsByClassName('collapsible');
            for (let i = 0; i < collapsibles.length; i++) {
                collapsibles[i].addEventListener('click', function() {
                    this.classList.toggle('active');
                    const content = this.nextElementSibling;
                    if (content.style.maxHeight) {
                        content.style.maxHeight = null;
                    } else {
                        content.style.maxHeight = content.scrollHeight + 'px';
                    }
                });
            }
        });

        // Helper function to convert base64 to correct format for Gemini API
        function convertBase64ForGemini(base64String) {
            // Remove data URL prefix if present
            const base64Data = base64String.includes(',') 
                ? base64String.split(',')[1] 
                : base64String;
            
            return base64Data;
        }

        // Process button with Gemini API
        processButton.addEventListener('click', async function() {
            if (!state.imageData) return;
            
            // Show loading state
            this.textContent = 'Processing...';
            this.disabled = true;
            
            try {
                // Prepare image data for Gemini API
                const base64Image = convertBase64ForGemini(state.imageData);
                
                // Create the prompt for OCR
                const promptText = "Please analyze this image and: " +
                    "1. Extract all visible text, especially focusing on names and hours worked " +
                    "2. Maintain the original formatting and structure " +
                    "3. Preserve any important visual context " +
                    "4. Make sure to clearly identify all partner/employee names and their corresponding hours " +
                    "Extract and format the text clearly:";
                
                // Prepare the request payload for Gemini API
                const payload = {
                    contents: [
                        {
                            parts: [
                                { text: promptText },
                                {
                                    inline_data: {
                                        mime_type: "image/jpeg",
                                        data: base64Image
                                    }
                                }
                            ]
                        }
                    ],
                    generationConfig: {
                        temperature: 0.4,
                        topK: 32,
                        topP: 1,
                        maxOutputTokens: 2048,
                    }
                };
                
                // Make the API call
                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
                }
                
                const responseData = await response.json();
                
                // Extract the OCR result text
                if (responseData.candidates && 
                    responseData.candidates[0] && 
                    responseData.candidates[0].content && 
                    responseData.candidates[0].content.parts && 
                    responseData.candidates[0].content.parts[0] && 
                    responseData.candidates[0].content.parts[0].text) {
                    
                    state.ocrResult = responseData.candidates[0].content.parts[0].text;
                    
                    // Update the UI
                    previewSection.classList.remove('hidden');
                    previewImage.src = state.imageData;
                    
                    extractedTextSection.classList.remove('hidden');
                    extractedText.textContent = state.ocrResult;
                    
                    // Show download option for OCR text
                    downloadSection.classList.remove('hidden');
                    updateDownloadLinks();
                    
                    // Scroll to extracted text section
                    extractedTextSection.scrollIntoView({behavior: 'smooth'});
                } else {
                    throw new Error('Couldn\'t extract text from the API response');
                }
            } catch (error) {
                console.error('Error processing with Gemini API:', error);
                alert(`Error processing image: ${error.message || 'Unknown error'}`);
            } finally {
                // Reset process button
                processButton.textContent = 'Process';
                processButton.disabled = false;
            }
        });

        // Extract Partner Data button with Gemini API
        extractPartnerDataBtn.addEventListener('click', async function() {
            if (!state.ocrResult) return;
            
            // Show loading state
            this.textContent = 'Extracting...';
            this.disabled = true;
            
            try {
                // Prepare the prompt for partner data extraction
                const extractionPrompt = 
                    `From the following text, extract partner names and their hours worked. Format as JSON:\n\n` +
                    `${state.ocrResult}\n\n` +
                    `Return a JSON array of objects with 'name' and 'hours' fields. Example:
                    [
                        {"name": "John Smith", "hours": 32.5},
                        {"name": "Jane Doe", "hours": 28.75}
                    ]
                    
                    Only include valid partners with hours. Output ONLY the JSON array, nothing else.`;
                
                // Prepare the request payload
                const payload = {
                    contents: [
                        {
                            parts: [
                                { text: extractionPrompt }
                            ]
                        }
                    ],
                    generationConfig: {
                        temperature: 0.2,
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 2048,
                    }
                };
                
                // Make the API call to extract partner data
                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
                }
                
                const responseData = await response.json();
                const partnerDataText = responseData.candidates[0].content.parts[0].text;
                
                // Extract JSON from the response
                const jsonMatch = partnerDataText.match(/\[\s*{[\s\S]*}\s*\]/);
                let partnerData = [];
                
                if (jsonMatch) {
                    try {
                        partnerData = JSON.parse(jsonMatch[0]);
                    } catch (e) {
                        throw new Error('Failed to parse JSON from API response');
                    }
                } else {
                    throw new Error('No valid JSON found in the API response');
                }
                
                // Add partner numbers
                partnerData.forEach((partner, index) => {
                    partner.number = index + 1;
                });
                
                // Calculate total hours
                state.totalHours = partnerData.reduce((sum, partner) => sum + parseFloat(partner.hours), 0);
                state.partnerData = partnerData;
                
                // Update UI
                totalHours.textContent = `Total Hours: ${state.totalHours}`;
                partnerList.innerHTML = '';
                
                partnerData.forEach(partner => {
                    const partnerEl = document.createElement('div');
                    partnerEl.classList.add('mb-2');
                    partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;
                    partnerList.appendChild(partnerEl);
                });
                
                // Show partner data section
                partnerDataSection.classList.remove('hidden');
                
                // Scroll to partner data section
                partnerDataSection.scrollIntoView({behavior: 'smooth'});
            } catch (error) {
                console.error('Error extracting partner data:', error);
                alert(`Error extracting partner data: ${error.message || 'Unknown error'}`);
            } finally {
                // Reset button
                extractPartnerDataBtn.textContent = 'Extract Partner Data';
                extractPartnerDataBtn.disabled = false;
            }
        });

        // Calculate Tips button
        calculateTipsBtn.addEventListener('click', function() {
            const tipAmount = parseFloat(totalTipAmount.value);
            if (isNaN(tipAmount) || tipAmount <= 0) {
                alert('Please enter a valid tip amount.');
                return;
            }
            
            if (!state.partnerData || state.partnerData.length === 0) {
                alert('No partner data available.');
                return;
            }
            
            // Calculate hourly rate (truncate to 2 decimal places)
            state.totalTipAmount = tipAmount;
            state.hourlyRate = Math.floor((tipAmount / state.totalHours) * 100) / 100;
            
            // Calculate individual tips with bill distribution
            const partnerData = JSON.parse(JSON.stringify(state.partnerData)); // Deep copy
            const denominations = [20, 10, 5, 1];
            const startIndex = (state.weekCounter - 1) % partnerData.length;
            const remainingAmounts = {};
            
            // Calculate exact and rounded tip amounts
            partnerData.forEach(partner => {
                const exactAmount = partner.hours * state.hourlyRate;
                partner.raw_tip_amount = exactAmount;
                partner.exact_tip_amount = exactAmount;
                partner.tip_amount = Math.round(exactAmount);
                partner.bills = {20: 0, 10: 0, 5: 0, 1: 0};
                remainingAmounts[partner.number] = partner.tip_amount;
            });
            
            // Distribute bills
            for (const denomination of denominations) {
                // Create order of partners starting with rotation partner
                const partnerOrder = [];
                for (let i = 0; i < partnerData.length; i++) {
                    partnerOrder.push((startIndex + i) % partnerData.length);
                }
                
                // Distribute bills of this denomination
                let distributed = true;
                while (distributed) {
                    distributed = false;
                    for (const idx of partnerOrder) {
                        const partner = partnerData[idx];
                        if (remainingAmounts[partner.number] >= denomination) {
                            partner.bills[denomination]++;
                            remainingAmounts[partner.number] -= denomination;
                            distributed = true;
                        }
                    }
                }
            }
            
            // Generate bills text and formatted output
            partnerData.forEach(partner => {
                const billsText = [];
                for (const denom of [20, 10, 5, 1]) {
                    if (partner.bills[denom] > 0) {
                        billsText.push(`${partner.bills[denom]}x$${denom}`);
                    }
                }
                
                partner.bills_text = billsText.join(',');
                partner.formatted_output = `Partner Name: ${partner.name} | #: ${partner.number} | ` +
                    `Hours: ${partner.hours} | Exact: $${partner.exact_tip_amount.toFixed(2)} | ` +
                    `Cash: $${partner.tip_amount} | Bills: ${partner.bills_text}`;
            });
            
            // Save distributed tips to state
            state.distributedTips = partnerData;
            state.tipCalculated = true;
            
            // Update UI
            calculationDetails.textContent = `Total Tips: $${tipAmount.toFixed(2)} ÷ Total Hours: ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour`;
            
            // Render tip distribution cards
            tipDistributionList.innerHTML = '';
            let copyPasteText = '';
            
            partnerData.forEach(partner => {
                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${partner.exact_tip_amount.toFixed(2)}`;
                
                // Create partner card
                const card = document.createElement('div');
                card.classList.add('partner-card');
                
                // Split bills text into chips
                const billChips = partner.bills_text.split(',').map(bill => 
                    `<span class="bill-chip">${bill.trim()}</span>`
                ).join(' ');
                
                card.innerHTML = `
                    <div class="partner-card-header">
                        <h4 class="partner-card-name">${partner.name}</h4>
                        <span class="partner-card-amount">$${partner.tip_amount}</span>
                    </div>
                    <div class="mt-2">
                        <span>${partner.hours} hours</span>
                    </div>
                    <div class="calculation-box">
                        ${calculation} → $${partner.tip_amount}
                    </div>
                    <div class="bills-box">
                        <div class="flex items-center flex-wrap">
                            <span class="mr-2">Bills:</span>
                            <div class="flex flex-wrap gap-2">
                                ${billChips}
                            </div>
                        </div>
                    </div>
                `;
                
                tipDistributionList.appendChild(card);
                copyPasteText += partner.formatted_output + '\n';
            });
            
            // Update copy-paste format
            copyPasteFormat.textContent = copyPasteText;
            
            // Show tip distribution section
            tipDistributionSection.classList.remove('hidden');
            
            // Update download links for the table
            updateDownloadLinks();
            
            // Increment week counter for next allocation
            state.weekCounter++;
            
            // Scroll to tip distribution section
            tipDistributionSection.scrollIntoView({behavior: 'smooth'});
        });

        // Save to History button
        saveToHistoryBtn.addEventListener('click', function() {
            if (!state.distributedTips) return;
            
            const distribution = {
                week: state.weekCounter - 1,
                total_amount: state.totalTipAmount,
                total_hours: state.totalHours,
                partners: state.distributedTips
            };
            
            state.tipsHistory.push(distribution);
            
            // Update UI
            updateHistoryList();
            historySection.classList.remove('hidden');
            
            // Show success message
            alert('Distribution saved to history!');
        });

        // Functions for updating the UI
        function updateDownloadLinks() {
            if (state.ocrResult) {
                const ocrBlob = new Blob([state.ocrResult], {type: 'text/plain'});
                downloadOcrBtn.href = URL.createObjectURL(ocrBlob);
            }
            
            if (state.tipCalculated && state.distributedTips) {
                const tableHtml = generateHtmlTable();
                const tableBlob = new Blob([tableHtml], {type: 'text/html'});
                downloadTableBtn.href = URL.createObjectURL(tableBlob);
                downloadTableBtn.classList.remove('hidden');
            } else {
                downloadTableBtn.classList.add('hidden');
            }
        }

        function updateHistoryList() {
            historyList.innerHTML = '';
            
            state.tipsHistory.forEach((dist, i) => {
                const historyItem = document.createElement('div');
                historyItem.innerHTML = `
                    <div class="custom-card mb-4">
                        <h4 class="font-bold starbucks-green">Week ${dist.week}</h4>
                        <p>Total: $${dist.total_amount.toFixed(2)} for ${dist.total_hours.toFixed(2)} hours</p>
                        <div class="mt-2 pl-4">
                            ${dist.partners.map(partner => 
                                `<div class="mb-1">
                                    ${partner.name} | #${partner.number} | ${partner.hours} hours | $${partner.tip_amount} | ${partner.bills_text}
                                </div>`
                            ).join('')}
                        </div>
                    </div>
                `;
                historyList.appendChild(historyItem);
            });
        }

        function generateHtmlTable() {
            const tipData = state.distributedTips.map(partner => {
                const exactAmount = partner.exact_tip_amount;
                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${exactAmount.toFixed(2)}`;
                
                return {
                    "Partner Name": partner.name,
                    "#": partner.number,
                    "Hours": partner.hours,
                    "Calculation": calculation,
                    "Cash Amount": `$${partner.tip_amount}`,
                    "Bills": partner.bills_text
                };
            });
            
            let tableRows = '';
            tipData.forEach(partner => {
                tableRows += `
                    <tr>
                        <td>${partner['#']}</td>
                        <td>${partner['Partner Name']}</td>
                        <td>${partner['Hours']}</td>
                        <td class="calculation">${partner['Calculation']}</td>
                        <td class="cash-amount">${partner['Cash Amount']}</td>
                        <td>${partner['Bills']}</td>
                    </tr>
                `;
            });
            
            return `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>TipJar Results</title>
                    <style>
                        body {
                            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                            margin: 20px;
                            padding: 0;
                            color: #333;
                        }
                        h1 {
                            color: #00704A;
                            text-align: center;
                        }
                        .info {
                            margin: 10px 0;
                            background-color: #f8f9fa;
                            padding: 10px;
                            border-radius: 8px;
                        }
                        table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-top: 20px;
                            border-radius: 8px;
                            overflow: hidden;
                        }
                        th, td {
                            border: 1px solid #ddd;
                            padding: 12px 8px;
                            text-align: left;
                        }
                        th {
                            background-color: #00704A;
                            color: white;
                        }
                        tr:nth-child(even) {
                            background-color: #f2f2f2;
                        }
                        .calculation {
                            color: #666;
                            font-size: 0.9em;
                        }
                        .cash-amount {
                            font-weight: bold;
                            color: #00704A;
                        }
                        @media (max-width: 600px) {
                            th, td {
                                padding: 8px 4px;
                                font-size: 14px;
                            }
                        }
                    </style>
                </head>
                <body>
                    <h1>Tip Distribution Results</h1>
                    <div class="info">
                        <p><strong>Hourly Rate Calculation:</strong> $${state.totalTipAmount.toFixed(2)} ÷ ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour</p>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Partner Name</th>
                                <th>Hours</th>
                                <th>Calculation</th>
                                <th>Cash</th>
                                <th>Bills</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${tableRows}
                        </tbody>
                    </table>
                </body>
                </html>
            `;
        }
    </script>
</body>
</html> 